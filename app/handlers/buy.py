from aiogram import Bot, F, Router, html
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, PreCheckoutQuery
from core.config import settings
from keyboards.buy import get_confirm_button
from services.carts import CartItemService, CartService
from services.orders import OrderService
from services.products import ProductService
from services.users import UserService
from states.cart_state import CartStates
from utils.order_to_excel import log_order_to_excel

router = Router()


@router.callback_query(lambda c: c.data.startswith("product_"))
async def buy_product(
    callback_query: CallbackQuery, session, state: FSMContext
):
    product_id = int(callback_query.data.split("_")[1])
    await state.update_data(product_id=product_id)

    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É:",
        reply_markup=None,
    )

    await state.set_state(CartStates.WaitingForQuantity)

    await callback_query.answer()


@router.message(CartStates.WaitingForQuantity)
async def process_quantity(message: Message, session, state: FSMContext):
    data = await state.get_data()
    product_id = data.get("product_id")

    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    product_service = ProductService(session)
    product = await product_service.get_product_by_id(product_id)
    if not product:
        await message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    total_price = product.price * quantity

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(quantity=quantity)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = get_confirm_button()

    message_text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"{html.bold(product.title)}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {product.price}\n"
        f"–ò—Ç–æ–≥–æ: {total_price}"
    )

    await message.reply(message_text, reply_markup=keyboard, parse_mode="HTML")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(CartStates.WaitingForConfirmation)


@router.callback_query(lambda c: c.data == "confirm_add")
async def confirm_add(
    callback_query: CallbackQuery, session, state: FSMContext
):
    data = await state.get_data()
    product_id = data.get("product_id")
    quantity = data.get("quantity")
    tg_user_id = callback_query.from_user.id

    user_service = UserService(session)
    user_id = await user_service.get_user_id_by_telegram_id(str(tg_user_id))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    cart_service = CartService(session)
    cart_item_service = CartItemService(session)

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart = await cart_service.get_or_create_cart(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    await cart_item_service.add_or_update_item(cart.id, product_id, quantity)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    product_service = ProductService(session)
    product = await product_service.get_product_by_id(product_id)
    if not product:
        product_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
    else:
        product_title = product.title

    await callback_query.message.answer(
        f"–¢–æ–≤–∞—Ä <b>{product_title}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}.",
        parse_mode="HTML",
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(
    callback_query: CallbackQuery, session, state: FSMContext
):
    tg_user_id = callback_query.from_user.id
    user_service = UserService(session)
    user_id = await user_service.get_user_id_by_telegram_id(str(tg_user_id))

    cart_service = CartService(session)
    cart_item_service = CartItemService(session)

    cart = await cart_service.get_or_create_cart(user_id)
    items = await cart_item_service.get_items(cart.id)

    if not items:
        await callback_query.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback_query.answer()
        return

    await callback_query.message.answer(
        "üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
    await state.set_state(CartStates.WaitingForDeliveryAddress)
    await callback_query.answer()


@router.message(CartStates.WaitingForDeliveryAddress)
async def process_delivery_address(
    message: Message, session, bot: Bot, state: FSMContext
):
    address = message.text.strip()

    if not address:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return

    tg_user_id = message.from_user.id
    user_service = UserService(session)
    user_id = await user_service.get_user_id_by_telegram_id(str(tg_user_id))

    cart_service = CartService(session)
    cart_item_service = CartItemService(session)

    cart = await cart_service.get_or_create_cart(user_id)
    items = await cart_item_service.get_items(cart.id)

    if not items:
        await message.reply("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await state.clear()
        return
    order_service = OrderService(session)
    order = await order_service.create_order(user_id, address, items)
    await log_order_to_excel(session, order.id)

    await cart_item_service.clear_cart(cart.id)
    total_cost = sum(item.product.price * item.quantity for item in items)
    await bot.send_invoice(
        message.from_user.id,
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
        description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
        payload="confirm_order",
        provider_token=settings.YOOKASSA_TOKEN,
        currency="RUB",
        start_parameter="test_bot",
        prices=[
            {"label": "–†—É–±", "amount": total_cost * 100}
        ],  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã
    )

    await state.clear()


@router.pre_checkout_query()
async def pre_checkout_query_handler(
    pre_checkout_query: PreCheckoutQuery, bot: Bot
):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, session):
    if message.successful_payment.invoice_payload != "confirm_order":
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await message.reply("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
