# handlers/categories.py
import logging

from aiogram import Router
from aiogram.types import CallbackQuery
from core.constants import ITEMS_PER_PAGE
from keyboards.categories import get_catalog_keyboard
from services.categories import CategoryService

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(lambda c: c.data == "catalog")
async def show_categories(
    callback_query: CallbackQuery, session, page: int = 0
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞.
    """
    try:
        category_service = CategoryService(session)
        categories = await category_service.get_root_categories()
        if not categories:
            await callback_query.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback_query.answer()
            return

        keyboard = get_catalog_keyboard(
            items=categories,
            page=page,
            items_per_page=ITEMS_PER_PAGE,
            level="category",
        )

        await callback_query.message.edit_text(
            "üìÇ <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:</b>",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        await callback_query.answer()
        logger.info(
            f"User {callback_query.from_user.id} viewed catalog page {page}"
        )
    except Exception as e:
        logger.error(f"Error in show_categories: {e}")
        await callback_query.message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞."
        )
        await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("category_"))
async def show_subcategories(callback_query: CallbackQuery, session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        category_id = int(callback_query.data.split("_")[1])
        await display_subcategories(
            callback_query, session, category_id, page=0
        )
        logger.info(
            f"User {callback_query.from_user.id} viewed subcategories of category {category_id}, page 0"
        )
    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing category_id: {e}")
        await callback_query.message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
        )
        await callback_query.answer()


async def display_subcategories(
    callback_query: CallbackQuery, session, category_id: int, page: int = 0
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    try:
        category_service = CategoryService(session)
        subcategories = await category_service.get_subcategories(category_id)

        if not subcategories:
            await callback_query.message.edit_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback_query.answer()
            return

        keyboard = get_catalog_keyboard(
            items=subcategories,
            page=page,
            items_per_page=ITEMS_PER_PAGE,
            level="subcategory",
            parent_id=category_id,
        )

        await callback_query.message.edit_text(
            "üìÇ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>", reply_markup=keyboard, parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in display_subcategories: {e}")
        await callback_query.message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        )
        await callback_query.answer()
