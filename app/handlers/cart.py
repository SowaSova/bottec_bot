from typing import Tuple

from aiogram import Router, html
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from keyboards.cart import get_cart_keyboard
from services.carts import CartItemService, CartService
from services.users import UserService

router = Router()


async def build_cart_message(items: list) -> Tuple[str, int]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.

    :param items: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
    """
    message_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total_cost = 0
    for item in items:
        product = item.product
        item_total = product.price * item.quantity
        total_cost += item_total
        message_text += (
            f"{html.bold(product.title)}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n"
            f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {product.price} —Ä—É–±.\n"
            f"–ò—Ç–æ–≥–æ: {item_total} —Ä—É–±.\n\n"
        )
    message_text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_cost} —Ä—É–±."
    return message_text, total_cost


@router.callback_query(lambda c: c.data == "cart")
async def show_cart(callback_query: CallbackQuery, session, state: FSMContext):
    tg_user_id = callback_query.from_user.id
    user_service = UserService(session)
    user_id = await user_service.get_user_id_by_telegram_id(str(tg_user_id))

    cart_service = CartService(session)
    cart_item_service = CartItemService(session)

    cart = await cart_service.get_or_create_cart(user_id)
    items = await cart_item_service.get_items(cart.id)

    if not items:
        await callback_query.message.reply("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–£–¥–∞–ª–∏—Ç—å"
    message_text, total_cost = await build_cart_message(items)
    keyboard = get_cart_keyboard(items)

    await callback_query.message.reply(
        message_text, reply_markup=keyboard, parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_item(
    callback_query: CallbackQuery, session, state: FSMContext
):
    product_id = int(callback_query.data.split("_")[1])
    tg_user_id = callback_query.from_user.id
    user_service = UserService(session)
    user_id = await user_service.get_user_id_by_telegram_id(str(tg_user_id))

    cart_service = CartService(session)
    cart_item_service = CartItemService(session)

    cart = await cart_service.get_or_create_cart(user_id)
    await cart_item_service.remove_item(cart.id, product_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã
    items = await cart_item_service.get_items(cart.id)

    if not items:
        await callback_query.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω. –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    message_text, total_cost = await build_cart_message(items)
    keyboard = get_cart_keyboard(items)

    await callback_query.message.edit_text(
        message_text, reply_markup=keyboard, parse_mode="HTML"
    )
    await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
